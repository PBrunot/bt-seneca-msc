(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.MSC=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){(function(root,definition){"use strict";if(typeof define==="function"&&define.amd){define(definition)}else if(typeof module==="object"&&module.exports){module.exports=definition()}else{root.log=definition()}})(this,function(){"use strict";var noop=function(){};var undefinedType="undefined";var isIE=typeof window!==undefinedType&&typeof window.navigator!==undefinedType&&/Trident\/|MSIE /.test(window.navigator.userAgent);var logMethods=["trace","debug","info","warn","error"];function bindMethod(obj,methodName){var method=obj[methodName];if(typeof method.bind==="function"){return method.bind(obj)}else{try{return Function.prototype.bind.call(method,obj)}catch(e){return function(){return Function.prototype.apply.apply(method,[obj,arguments])}}}}function traceForIE(){if(console.log){if(console.log.apply){console.log.apply(console,arguments)}else{Function.prototype.apply.apply(console.log,[console,arguments])}}if(console.trace)console.trace()}function realMethod(methodName){if(methodName==="debug"){methodName="log"}if(typeof console===undefinedType){return false}else if(methodName==="trace"&&isIE){return traceForIE}else if(console[methodName]!==undefined){return bindMethod(console,methodName)}else if(console.log!==undefined){return bindMethod(console,"log")}else{return noop}}function replaceLoggingMethods(level,loggerName){for(var i=0;i<logMethods.length;i++){var methodName=logMethods[i];this[methodName]=i<level?noop:this.methodFactory(methodName,level,loggerName)}this.log=this.debug}function enableLoggingWhenConsoleArrives(methodName,level,loggerName){return function(){if(typeof console!==undefinedType){replaceLoggingMethods.call(this,level,loggerName);this[methodName].apply(this,arguments)}}}function defaultMethodFactory(methodName,level,loggerName){return realMethod(methodName)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(name,defaultLevel,factory){var self=this;var currentLevel;defaultLevel=defaultLevel==null?"WARN":defaultLevel;var storageKey="loglevel";if(typeof name==="string"){storageKey+=":"+name}else if(typeof name==="symbol"){storageKey=undefined}function persistLevelIfPossible(levelNum){var levelName=(logMethods[levelNum]||"silent").toUpperCase();if(typeof window===undefinedType||!storageKey)return;try{window.localStorage[storageKey]=levelName;return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"="+levelName+";"}catch(ignore){}}function getPersistedLevel(){var storedLevel;if(typeof window===undefinedType||!storageKey)return;try{storedLevel=window.localStorage[storageKey]}catch(ignore){}if(typeof storedLevel===undefinedType){try{var cookie=window.document.cookie;var location=cookie.indexOf(encodeURIComponent(storageKey)+"=");if(location!==-1){storedLevel=/^([^;]+)/.exec(cookie.slice(location))[1]}}catch(ignore){}}if(self.levels[storedLevel]===undefined){storedLevel=undefined}return storedLevel}function clearPersistedLevel(){if(typeof window===undefinedType||!storageKey)return;try{window.localStorage.removeItem(storageKey);return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC"}catch(ignore){}}self.name=name;self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5};self.methodFactory=factory||defaultMethodFactory;self.getLevel=function(){return currentLevel};self.setLevel=function(level,persist){if(typeof level==="string"&&self.levels[level.toUpperCase()]!==undefined){level=self.levels[level.toUpperCase()]}if(typeof level==="number"&&level>=0&&level<=self.levels.SILENT){currentLevel=level;if(persist!==false){persistLevelIfPossible(level)}replaceLoggingMethods.call(self,level,name);if(typeof console===undefinedType&&level<self.levels.SILENT){return"No console available for logging"}}else{throw"log.setLevel() called with invalid level: "+level}};self.setDefaultLevel=function(level){defaultLevel=level;if(!getPersistedLevel()){self.setLevel(level,false)}};self.resetLevel=function(){self.setLevel(defaultLevel,false);clearPersistedLevel()};self.enableAll=function(persist){self.setLevel(self.levels.TRACE,persist)};self.disableAll=function(persist){self.setLevel(self.levels.SILENT,persist)};var initialLevel=getPersistedLevel();if(initialLevel==null){initialLevel=defaultLevel}self.setLevel(initialLevel,false)}var defaultLogger=new Logger;var _loggersByName={};defaultLogger.getLogger=function getLogger(name){if(typeof name!=="symbol"&&typeof name!=="string"||name===""){throw new TypeError("You must supply a name when creating a logger.")}var logger=_loggersByName[name];if(!logger){logger=_loggersByName[name]=new Logger(name,defaultLogger.getLevel(),defaultLogger.methodFactory)}return logger};var _log=typeof window!==undefinedType?window.log:undefined;defaultLogger.noConflict=function(){if(typeof window!==undefinedType&&window.log===defaultLogger){window.log=_log}return defaultLogger};defaultLogger.getLoggers=function getLoggers(){return _loggersByName};defaultLogger["default"]=defaultLogger;return defaultLogger})},{}],2:[function(require,module,exports){"use strict";const log=require("loglevel");async function GetState(){let ready=false;let initializing=false;switch(btState.state){case State.ERROR:case State.STOPPED:case State.NOT_CONNECTED:ready=false;initializing=false;break;case State.BUSY:case State.IDLE:ready=true;initializing=false;break;case State.CONNECTING:case State.DEVICE_PAIRED:case State.METER_INIT:case State.METER_INITIALIZING:case State.SUBSCRIBING:initializing=true;ready=false;break;default:ready=false;initializing=false}return{lastSetpoint:btState.lastSetpoint,lastMeasure:btState.lastMeasure,deviceName:btState.btDevice?btState.btDevice.name:"",deviceSerial:btState.meter?.serial,stats:btState.stats,deviceMode:btState.meter?.mode,status:btState.state,batteryLevel:btState.meter?.battery,ready:ready,initializing:initializing}}async function GetStateJSON(){return JSON.stringify(await GetState())}async function ExecuteJSON(jsonCommand){let command=JSON.parse(jsonCommand);return JSON.stringify(await Execute(command))}async function Execute(command){log.info("Execute called...");if(command!=null)command.pending=true;var cpt=0;while(btState.command!=null&&btState.command.pending&&cpt<30){log.debug("Waiting for current command to complete...");await sleep(1e3);cpt++}log.info("Setting new command :"+command);btState.command=command;if(!btState.started){btState.state=State.NOT_CONNECTED;stateMachine()}if(command!=null){await waitFor(()=>!command.pending||btState.state==State.STOPPED)}return command}async function Pair(){log.info("Pair called...");if(!btState.started){btState.state=State.NOT_CONNECTED;stateMachine()}else if(btState.state==State.ERROR){btState.state=State.NOT_CONNECTED}await waitFor(()=>btState.state==State.IDLE||btState.state==State.STOPPED);log.info("Pairing completed, state :",btState.state);return btState.state!=State.STOPPED}async function Stop(){log.info("Stop request received");btState.stopRequest=true;await waitFor(()=>!btState.started);btState.stopRequest=false;log.warn("Stopped on request.");return true}class ModbusError extends Error{contructor(message,fc){this.message=message;this.fc=fc}}function crc16(buffer){var crc=65535;var odd;for(var i=0;i<buffer.length;i++){crc=crc^buffer[i];for(var j=0;j<8;j++){odd=crc&1;crc=crc>>1;if(odd){crc=crc^40961}}}return crc}function makeFC3(ID,count,register){const buffer=new ArrayBuffer(8);const view=new DataView(buffer);view.setUint8(0,ID);view.setUint8(1,3);view.setUint16(2,register,false);view.setUint16(4,count,false);var crc=crc16(new Uint8Array(buffer.slice(0,-2)));view.setUint16(6,crc,true);return buffer}function makeFC16(address,dataAddress,array){const code=16;if(typeof address==="undefined"||typeof dataAddress==="undefined"){return}let dataLength=array.length;const codeLength=7+2*dataLength;const buf=new ArrayBuffer(codeLength+2);const dv=new DataView(buf);dv.setUint8(0,address);dv.setUint8(1,code);dv.setUint16(2,dataAddress,false);dv.setUint16(4,dataLength,false);dv.setUint8(6,dataLength*2);for(let i=0;i<dataLength;i++){dv.setUint16(7+2*i,array[i],false)}dv.setUint16(codeLength,crc16(buf.slice(0,-2)),true);return buf}function parseFC3(response){if(!(response instanceof ArrayBuffer)){return null}const view=new DataView(response);var contents=[];if(response.length<5)return;var computed_crc=crc16(new Uint8Array(response.slice(0,-2)));var actual_crc=view.getUint16(view.byteLength-2,true);if(computed_crc!=actual_crc){throw new ModbusError("Wrong CRC",3)}var address=view.getUint8(0);if(address!=SENECA_MB_SLAVE_ID){throw new ModbusError("Wrong slave ID :"+address,3)}var fc=view.getUint8(1);if(fc>128){var exp=view.getUint8(2);throw new ModbusError("Exception by slave:"+exp,3)}if(fc!=3){throw new ModbusError("Wrong FC :"+fc,fc)}var length=view.getUint8(2);const buffer=new ArrayBuffer(length);const registers=new DataView(buffer);for(var i=3;i<view.byteLength-2;i+=2){var reg=view.getInt16(i,false);registers.setInt16(i-3,reg,false);var idx=(i-3)/2+1;log.debug("\t\tRegister "+idx+"/"+length/2+" = "+reg)}return registers}function parseFC16checked(response,expected){try{const result=parseFC16(response);return expected<=0||result[1]===expected}catch(err){log.error("FC16 answer error",err);return false}}function parseFC16(response){const view=new DataView(response);var contents=[];if(response.length<3)return;var slave=view.getUint8(0);if(slave!=SENECA_MB_SLAVE_ID){return}var fc=view.getUint8(1);if(fc>128){var exp=view.getUint8(2);throw new ModbusError("Exception :"+exp,16)}if(fc!=16){throw new ModbusError("Wrong FC :"+fc,fc)}var computed_crc=crc16(new Uint8Array(response.slice(0,-2)));var actual_crc=view.getUint16(view.byteLength-2,true);if(computed_crc!=actual_crc){throw new ModbusError("Wrong CRC",16)}var address=view.getUint16(2,false);var length=view.getUint16(4,false);return[address,length]}function buf2hex(buffer){return[...new Uint8Array(buffer)].map(x=>x.toString(16).padStart(2,"0")).join(" ")}const SENECA_MB_SLAVE_ID=25;const CommandType={NONE_UNKNOWN:0,mA_passive:1,mA_active:2,V:3,mV:4,THERMO_J:5,THERMO_K:6,THERMO_T:7,THERMO_E:8,THERMO_L:9,THERMO_N:10,THERMO_R:11,THERMO_S:12,THERMO_B:13,PT100_2W:14,PT100_3W:15,PT100_4W:16,PT500_2W:17,PT500_3W:18,PT500_4W:19,PT1000_2W:20,PT1000_3W:21,PT1000_4W:22,Cu50_2W:23,Cu50_3W:24,Cu50_4W:25,Cu100_2W:26,Cu100_3W:27,Cu100_4W:28,Ni100_2W:29,Ni100_3W:30,Ni100_4W:31,Ni120_2W:32,Ni120_3W:33,Ni120_4W:34,LoadCell:35,Frequency:36,PulseTrain:37,RESERVED:38,RESERVED_2:40,OFF:100,GEN_mA_passive:101,GEN_mA_active:102,GEN_V:103,GEN_mV:104,GEN_THERMO_J:105,GEN_THERMO_K:106,GEN_THERMO_T:107,GEN_THERMO_E:108,GEN_THERMO_L:109,GEN_THERMO_N:110,GEN_THERMO_R:111,GEN_THERMO_S:112,GEN_THERMO_B:113,GEN_PT100_2W:114,GEN_PT500_2W:117,GEN_PT1000_2W:120,GEN_Cu50_2W:123,GEN_Cu100_2W:126,GEN_Ni100_2W:129,GEN_Ni120_2W:132,GEN_LoadCell:135,GEN_Frequency:136,GEN_PulseTrain:137,GEN_RESERVED:138,SETTING_RESERVED:1e3,SET_UThreshold_F:1001,SET_Sensitivity_uS:1002,SET_ColdJunction:1003,SET_Ulow:1004,SET_Uhigh:1005,SET_ShutdownDelay:1006};const MSCRegisters={SerialNumber:10,CurrentMode:100,MeasureFlags:102,CMD:107,AUX1:108,LoadCellMeasure:114,TempMeasure:120,RtdTemperatureMeasure:128,RtdResistanceMeasure:130,FrequencyMeasure:164,MinMeasure:132,MaxMeasure:134,InstantMeasure:136,PowerOffDelay:142,PowerOffRemaining:146,PulseOFFMeasure:150,PulseONMeasure:152,Sensibility_uS_OFF:166,Sensibility_uS_ON:168,BatteryMeasure:174,ColdJunction:190,ThresholdU_Freq:192,GenerationFlags:202,GEN_CMD:207,GEN_AUX1:208,CurrentSetpoint:210,VoltageSetpoint:212,LoadCellSetpoint:216,ThermoTemperatureSetpoint:220,RTDTemperatureSetpoint:228,PulsesCount:252,FrequencyTICK1:254,FrequencyTICK2:256,GenUhighPerc:262,GenUlowPerc:264};var MAX_U_GEN=27;const BlueToothMSC={ServiceUuid:"0003cdd0-0000-1000-8000-00805f9b0131",ModbusAnswerUuid:"0003cdd1-0000-1000-8000-00805f9b0131",ModbusRequestUuid:"0003cdd2-0000-1000-8000-00805f9b0131"};const State={NOT_CONNECTED:"Not connected",CONNECTING:"Bluetooth device pairing...",DEVICE_PAIRED:"Device paired",SUBSCRIBING:"Bluetooth interfaces connecting...",IDLE:"Idle",BUSY:"Busy",ERROR:"Error",STOPPING:"Closing BT interfaces...",STOPPED:"Stopped",METER_INIT:"Meter connected",METER_INITIALIZING:"Reading meter state..."};class APIState{constructor(){this.state=State.NOT_CONNECTED;this.prev_state=State.NOT_CONNECTED;this.state_cpt=0;this.started=false;this.stopRequest=false;this.lastMeasure={};this.lastSetpoint={};this.meter=new MeterState;this.command=null;this.response=null;this.charRead=null;this.charWrite=null;this.btService=null;this.btDevice=null;this.stats={requests:0,responses:0,modbus_errors:0,"GATT disconnects":0,exceptions:0,subcribes:0,commands:0,responseTime:0,lastResponseTime:0,last_connect:new Date(2020,1,1).toISOString()}}}class MeterState{constructor(){this.firmware="";this.serial="";this.mode=CommandType.NONE_UNKNOWN;this.battery=0}isMeasurement(){return this.mode>CommandType.NONE_UNKNOWN&&this.mode<CommandType.OFF}isGeneration(){return this.mode>CommandType.OFF&&this.mode<CommandType.GEN_RESERVED}}function isGeneration(ctype){return ctype>CommandType.OFF&&ctype<CommandType.GEN_RESERVED}function isMeasurement(ctype){return ctype>CommandType.NONE_UNKNOWN&&ctype<CommandType.RESERVED}function isSetting(ctype){return ctype==CommandType.OFF||ctype>CommandType.SETTING_RESERVED}function isValid(ctype){return isMeasurement(ctype)||isGeneration(ctype)||isSetting(ctype)}class Command{constructor(ctype=CommandType.NONE_UNKNOWN,setpoint=null){this.type=parseInt(ctype);this.setpoint=setpoint;this.error=false;this.pending=true;this.request=null;this.response=null}toString(){return"Type: "+Parse(CommandType,this.type)+", setpoint:"+this.setpoint+", pending:"+this.pending+", error:"+this.error}defaultSetpoint(){switch(this.type){case CommandType.GEN_THERMO_B:case CommandType.GEN_THERMO_E:case CommandType.GEN_THERMO_J:case CommandType.GEN_THERMO_K:case CommandType.GEN_THERMO_L:case CommandType.GEN_THERMO_N:case CommandType.GEN_THERMO_R:case CommandType.GEN_THERMO_S:case CommandType.GEN_THERMO_T:case CommandType.GEN_Cu50_3W:case CommandType.GEN_Cu50_2W:case CommandType.GEN_Cu100_2W:case CommandType.GEN_Ni100_2W:case CommandType.GEN_Ni120_2W:case CommandType.GEN_PT100_2W:case CommandType.GEN_PT500_2W:case CommandType.GEN_PT1000_2W:return{"Temperature (°C)":0};case CommandType.GEN_V:return{"Voltage (V)":0};case CommandType.GEN_mV:return{"Voltage (mV)":0};case CommandType.GEN_mA_active:case CommandType.GEN_mA_passive:return{"Current (mA)":0};case CommandType.GEN_LoadCell:return{"Imbalance (mV/V)":0};case CommandType.GEN_Frequency:return{"Frequency (Hz)":0};case CommandType.GEN_PulseTrain:return{"Pulses count":0,"Frequency (Hz)":0};case CommandType.SET_UThreshold_F:return{"Uthreshold (V)":2};case CommandType.SET_Sensitivity_uS:return{"Sensibility (uS)":2};case CommandType.SET_ColdJunction:return{"Cold junction compensation":0};case CommandType.SET_Ulow:return{"U low (V)":0/MAX_U_GEN};case CommandType.SET_Uhigh:return{"U high (V)":5/MAX_U_GEN};case CommandType.SET_ShutdownDelay:return{"Delay (s)":60*5};default:return{}}}isGeneration(){return isGeneration(this.type)}isMeasurement(){return isMeasurement(this.type)}isSetting(){return isSetting(this.type)}isValid(){return isMeasurement(this.type)||isGeneration(this.type)||isSetting(this.type)}}let sleep=ms=>new Promise(r=>setTimeout(r,ms));let waitFor=async function waitFor(f){while(!f())await sleep(100+Math.random()*25);return f()};function makeSerialNumber(){return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.SerialNumber)}function makeCurrentMode(){return makeFC3(SENECA_MB_SLAVE_ID,1,MSCRegisters.CurrentMode)}function makeBatteryLevel(){return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.BatteryMeasure)}function parseBattery(responseFC3){return getFloat32LEBS(responseFC3,0)}function parseSerialNumber(registers){if(registers.length<4){throw new Error("Invalid serial number response")}const val1=registers.getUint16(0,false);const val2=registers.getUint16(2,false);const serial=((val2<<16)+val1).toString();if(serial.length>5){return serial.substr(0,5)+"_"+serial.substr(5,serial.length-5)}return serial}function getFloat32LEBS(dataView,offset){const buff=new ArrayBuffer(4);const dv=new DataView(buff);dv.setInt16(0,dataView.getInt16(offset+2,false),false);dv.setInt16(2,dataView.getInt16(offset,false),false);return dv.getFloat32(0,false)}function getUint32LEBS(dataView,offset){const buff=new ArrayBuffer(4);const dv=new DataView(buff);dv.setInt16(0,dataView.getInt16(offset+2,false),false);dv.setInt16(2,dataView.getInt16(offset,false),false);return dv.getUint32(0,false)}function setFloat32LEBS(dataView,offset,value){const buff=new ArrayBuffer(4);const dv=new DataView(buff);dv.setFloat32(0,value,false);dataView.setInt16(offset,dv.getInt16(2,false),false);dataView.setInt16(offset+2,dv.getInt16(0,false),false)}function setUint32LEBS(dataView,offset,value){const buff=new ArrayBuffer(4);const dv=new DataView(buff);dv.setUint32(0,value,false);dataView.setInt16(offset,dv.getInt16(2,false),false);dataView.setInt16(offset+2,dv.getInt16(0,false),false)}function Parse(enumtype,enumvalue){for(var enumName in enumtype){if(enumtype[enumName]==enumvalue){return eval([enumtype+"."+enumName])}}return null}function parseCurrentMode(registers,currentMode){if(registers.length<2){throw new Error("Invalid mode response")}const val1=registers.getUint16(0,false);if(val1==CommandType.RESERVED||val1==CommandType.GEN_RESERVED||val1==CommandType.RESERVED_2){return currentMode}const value=Parse(CommandType,val1);if(value==null)throw new Error("Unknown meter mode : "+value);return val1}function makeModeRequest(mode){const value=Parse(CommandType,mode);const CHANGE_STATUS=1;if(value==null||value==CommandType.NONE_UNKNOWN){return null}if(mode>CommandType.NONE_UNKNOWN&&mode<=CommandType.OFF){return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.CMD,[CHANGE_STATUS,mode])}else if(mode>CommandType.OFF&&mode<CommandType.GEN_RESERVED){switch(mode){case CommandType.GEN_THERMO_B:case CommandType.GEN_THERMO_E:case CommandType.GEN_THERMO_J:case CommandType.GEN_THERMO_K:case CommandType.GEN_THERMO_L:case CommandType.GEN_THERMO_N:case CommandType.GEN_THERMO_R:case CommandType.GEN_THERMO_S:case CommandType.GEN_THERMO_T:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.GEN_CMD,[CHANGE_STATUS,mode]);case CommandType.GEN_Cu50_3W:case CommandType.GEN_Cu50_2W:case CommandType.GEN_Cu100_2W:case CommandType.GEN_Ni100_2W:case CommandType.GEN_Ni120_2W:case CommandType.GEN_PT100_2W:case CommandType.GEN_PT500_2W:case CommandType.GEN_PT1000_2W:default:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.GEN_CMD,[CHANGE_STATUS,mode])}}return null}function makeMeasureRequest(mode){switch(mode){case CommandType.OFF:return null;case CommandType.THERMO_B:case CommandType.THERMO_E:case CommandType.THERMO_J:case CommandType.THERMO_K:case CommandType.THERMO_L:case CommandType.THERMO_N:case CommandType.THERMO_R:case CommandType.THERMO_S:case CommandType.THERMO_T:return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.TempMeasure);case CommandType.Cu50_2W:case CommandType.Cu50_3W:case CommandType.Cu50_4W:case CommandType.Cu100_2W:case CommandType.Cu100_3W:case CommandType.Cu100_4W:case CommandType.Ni100_2W:case CommandType.Ni100_3W:case CommandType.Ni100_4W:case CommandType.Ni120_2W:case CommandType.Ni120_3W:case CommandType.Ni120_4W:case CommandType.PT100_2W:case CommandType.PT100_3W:case CommandType.PT100_4W:case CommandType.PT500_2W:case CommandType.PT500_3W:case CommandType.PT500_4W:case CommandType.PT1000_2W:case CommandType.PT1000_3W:case CommandType.PT1000_4W:return makeFC3(SENECA_MB_SLAVE_ID,4,MSCRegisters.RtdTemperatureMeasure);case CommandType.Frequency:return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.FrequencyMeasure);case CommandType.PulseTrain:return makeFC3(SENECA_MB_SLAVE_ID,4,MSCRegisters.PulseOFFMeasure);case CommandType.LoadCell:return makeFC3(SENECA_MB_SLAVE_ID,4,MSCRegisters.LoadCell);case CommandType.mA_passive:case CommandType.mA_active:case CommandType.V:case CommandType.mV:return makeFC3(SENECA_MB_SLAVE_ID,6,MSCRegisters.MinMeasure);default:throw new Error("Mode not managed :"+btState.meter.mode)}}function parseMeasure(responseFC3,mode){var meas,meas2,min,max;if(responseFC3==null)return{};switch(mode){case CommandType.THERMO_B:case CommandType.THERMO_E:case CommandType.THERMO_J:case CommandType.THERMO_K:case CommandType.THERMO_L:case CommandType.THERMO_N:case CommandType.THERMO_R:case CommandType.THERMO_S:meas=getFloat32LEBS(responseFC3,0);var value=Math.round(meas*100)/100;return{Description:"Temperature",Value:value,Unit:"°C",Timestamp:(new Date).toISOString()};case CommandType.Cu50_2W:case CommandType.Cu50_3W:case CommandType.Cu50_4W:case CommandType.Cu100_2W:case CommandType.Cu100_3W:case CommandType.Cu100_4W:case CommandType.Ni100_2W:case CommandType.Ni100_3W:case CommandType.Ni100_4W:case CommandType.Ni120_2W:case CommandType.Ni120_3W:case CommandType.Ni120_4W:case CommandType.PT100_2W:case CommandType.PT100_3W:case CommandType.PT100_4W:case CommandType.PT500_2W:case CommandType.PT500_3W:case CommandType.PT500_4W:case CommandType.PT1000_2W:case CommandType.PT1000_3W:case CommandType.PT1000_4W:meas=getFloat32LEBS(responseFC3,0);meas2=getFloat32LEBS(responseFC3,4);return{Description:"Temperature",Value:Math.round(meas*10)/10,Unit:"°C",SecondaryDescription:"Resistance",SecondaryValue:Math.round(meas2*10)/10,SecondaryUnit:"Ohms",Timestamp:(new Date).toISOString()};case CommandType.Frequency:meas=getFloat32LEBS(responseFC3,0);return{Description:"Frequency",Value:Math.round(meas*10)/10,Unit:"Hz",Timestamp:(new Date).toISOString()};case CommandType.mA_active:case CommandType.mA_passive:min=getFloat32LEBS(responseFC3,0);max=getFloat32LEBS(responseFC3,4);meas=getFloat32LEBS(responseFC3,8);return{Description:"Current",Value:Math.round(meas*100)/100,Unit:"mA",Minimum:Math.round(min*100)/100,Maximum:Math.round(max*100)/100,Timestamp:(new Date).toISOString()};case CommandType.V:min=getFloat32LEBS(responseFC3,0);max=getFloat32LEBS(responseFC3,4);meas=getFloat32LEBS(responseFC3,8);return{Description:"Voltage",Value:Math.round(meas*100)/100,Unit:"V",Minimum:Math.round(min*100)/100,Maximum:Math.round(max*100)/100,Timestamp:(new Date).toISOString()};case CommandType.mV:min=getFloat32LEBS(responseFC3,0);max=getFloat32LEBS(responseFC3,4);meas=getFloat32LEBS(responseFC3,8);return{Description:"Voltage",Value:Math.round(meas*100)/100,Unit:"mV",Minimum:Math.round(min*100)/100,Maximum:Math.round(max*100)/100,Timestamp:(new Date).toISOString()};case CommandType.PulseTrain:meas=getUint32LEBS(responseFC3,0);meas2=getUint32LEBS(responseFC3,4);return{Description:"Pulse ON",Value:meas,Unit:"",SecondaryDescription:"Pulse OFF",SecondaryValue:meas2,SecondaryUnit:"",Timestamp:(new Date).toISOString()};case CommandType.LoadCell:meas=Math.round(getFloat32LEBS(responseFC3,0)*1e3)/1e3;return{Description:"Imbalance",Value:meas,Unit:"mV/V",Timestamp:(new Date).toISOString()};default:return{Description:"Unknown",Value:Math.round(meas*1e3)/1e3,Unit:"?",Timestamp:(new Date).toISOString()}}}function makeQualityBitRequest(mode){return makeFC3(SENECA_MB_SLAVE_ID,1,MSCRegisters.MeasureFlags)}function isQualityValid(responseFC3){return(responseFC3.getUint16(0,false)&1<<13)==0}function makeGenStatusRead(mode){return makeFC3(SENECA_MB_SLAVE_ID,1,MSCRegisters.GenerationFlags)}function parseGenStatus(responseFC3,mode){switch(mode){case CommandType.GEN_mA_active:case CommandType.GEN_mA_passive:return(responseFC3.getUint16(0,false)&1<<15)==0&&(responseFC3.getUint16(0,false)&1<<14)==0;default:return(responseFC3.getUint16(0,false)&1<<15)==0}}function makeSetpointRequest(mode,setpoint){var TEMP,registers;var dt=new ArrayBuffer(4);var dv=new DataView(dt);setFloat32LEBS(dv,0,setpoint);const sp=[dv.getUint16(0,false),dv.getUint16(2,false)];var dtInt=new ArrayBuffer(4);var dvInt=new DataView(dtInt);setUint32LEBS(dvInt,0,setpoint);const spInt=[dvInt.getUint16(0,false),dvInt.getUint16(2,false)];switch(mode){case CommandType.GEN_V:case CommandType.GEN_mV:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.VoltageSetpoint,sp);case CommandType.GEN_mA_active:case CommandType.GEN_mA_passive:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.CurrentSetpoint,sp);case CommandType.GEN_Cu50_3W:case CommandType.GEN_Cu50_2W:case CommandType.GEN_Cu100_2W:case CommandType.GEN_Ni100_2W:case CommandType.GEN_Ni120_2W:case CommandType.GEN_PT100_2W:case CommandType.GEN_PT500_2W:case CommandType.GEN_PT1000_2W:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.RTDTemperatureSetpoint,sp);case CommandType.GEN_THERMO_B:case CommandType.GEN_THERMO_E:case CommandType.GEN_THERMO_J:case CommandType.GEN_THERMO_K:case CommandType.GEN_THERMO_L:case CommandType.GEN_THERMO_N:case CommandType.GEN_THERMO_R:case CommandType.GEN_THERMO_S:case CommandType.GEN_THERMO_T:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.ThermoTemperatureSetpoint,sp);case CommandType.GEN_LoadCell:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.LoadCellSetpoint,sp);case CommandType.GEN_Frequency:dt=new ArrayBuffer(8);dv=new DataView(dt);TEMP=Math.round(2e4/setpoint,0);dv.setUint32(0,Math.floor(TEMP/2),false);dv.setUint32(4,TEMP-Math.floor(TEMP/2),false);registers=[dv.getUint16(2,false),dv.getUint16(0,false),dv.getUint16(6,false),dv.getUint16(4,false)];return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.FrequencyTICK1,registers);case CommandType.GEN_PulseTrain:dt=new ArrayBuffer(12);dv=new DataView(dt);TEMP=Math.round(2e4/setpoint[1],0);dv.setUint32(0,setpoint[0],false);dv.setUint32(4,Math.floor(TEMP/2),false);dv.setUint32(8,TEMP-Math.floor(TEMP/2),false);registers=[dv.getUint16(2,false),dv.getUint16(0,false),dv.getUint16(6,false),dv.getUint16(4,false),dv.getUint16(10,false),dv.getUint16(8,false)];return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.PulsesCount,registers);case CommandType.SET_UThreshold_F:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.ThresholdU_Freq,sp);case CommandType.SET_Sensitivity_uS:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.Sensibility_uS_OFF,[spInt[0],spInt[1],spInt[0],spInt[1]]);case CommandType.SET_ColdJunction:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.ColdJunction,sp);case CommandType.SET_Ulow:setFloat32LEBS(dv,0,setpoint/MAX_U_GEN);var sp2=[dv.getUint16(0,false),dv.getUint16(2,false)];return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.GenUlowPerc,sp2);case CommandType.SET_Uhigh:setFloat32LEBS(dv,0,setpoint/MAX_U_GEN);var sp2=[dv.getUint16(0,false),dv.getUint16(2,false)];return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.GenUhighPerc,sp2);case CommandType.SET_ShutdownDelay:return makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.PowerOffDelay,setpoint);default:throw new Error("Not handled")}return null}function makeSetpointRead(mode){switch(mode){case CommandType.GEN_V:case CommandType.GEN_mV:return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.VoltageSetpoint);case CommandType.GEN_mA_active:case CommandType.GEN_mA_passive:return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.CurrentSetpoint);case CommandType.GEN_Cu50_3W:case CommandType.GEN_Cu50_2W:case CommandType.GEN_Cu100_2W:case CommandType.GEN_Ni100_2W:case CommandType.GEN_Ni120_2W:case CommandType.GEN_PT100_2W:case CommandType.GEN_PT500_2W:case CommandType.GEN_PT1000_2W:return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.RTDTemperatureSetpoint);case CommandType.GEN_THERMO_B:case CommandType.GEN_THERMO_E:case CommandType.GEN_THERMO_J:case CommandType.GEN_THERMO_K:case CommandType.GEN_THERMO_L:case CommandType.GEN_THERMO_N:case CommandType.GEN_THERMO_R:case CommandType.GEN_THERMO_S:case CommandType.GEN_THERMO_T:return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.ThermoTemperatureSetpoint);case CommandType.GEN_Frequency:case CommandType.GEN_PulseTrain:return makeFC3(SENECA_MB_SLAVE_ID,4,MSCRegisters.FrequencyTICK1);case CommandType.GEN_LoadCell:return makeFC3(SENECA_MB_SLAVE_ID,2,MSCRegisters.LoadCellSetpoint);case CommandType.NONE_UNKNOWN:case CommandType.OFF:return null}throw new Error("Not handled")}function parseSetpointRead(registers,mode){var rounded=Math.round(getFloat32LEBS(registers,0)*100)/100;switch(mode){case CommandType.GEN_mA_active:case CommandType.GEN_mA_passive:return{Description:"Current",Value:rounded,Unit:"mA",Timestamp:(new Date).toISOString()};case CommandType.GEN_V:return{Description:"Voltage",Value:rounded,Unit:"V",Timestamp:(new Date).toISOString()};case CommandType.GEN_mV:return{Description:"Voltage",Value:rounded,Unit:"mV",Timestamp:(new Date).toISOString()};case CommandType.GEN_LoadCell:return{Description:"Imbalance",Value:rounded,Unit:"mV/V",Timestamp:(new Date).toISOString()};case CommandType.GEN_Frequency:case CommandType.GEN_PulseTrain:var tick1=getUint32LEBS(registers,0);var tick2=getUint32LEBS(registers,4);var fON=0;var fOFF=0;if(tick1!=0)fON=Math.round(1/(tick1*2/2e4)*10)/10;if(tick2!=0)fOFF=Math.round(1/(tick2*2/2e4)*10)/10;return{Description:"Frequency ON",Value:fON,Unit:"Hz",SecondaryDescription:"Frequency OFF",SecondaryValue:fOFF,SecondaryUnit:"Hz",Timestamp:(new Date).toISOString()};case CommandType.GEN_Cu50_2W:case CommandType.GEN_Cu100_2W:case CommandType.GEN_Ni100_2W:case CommandType.GEN_Ni120_2W:case CommandType.GEN_PT100_2W:case CommandType.GEN_PT500_2W:case CommandType.GEN_PT1000_2W:case CommandType.GEN_THERMO_B:case CommandType.GEN_THERMO_E:case CommandType.GEN_THERMO_J:case CommandType.GEN_THERMO_K:case CommandType.GEN_THERMO_L:case CommandType.GEN_THERMO_N:case CommandType.GEN_THERMO_R:case CommandType.GEN_THERMO_S:case CommandType.GEN_THERMO_T:return{Description:"Temperature",Value:rounded,Unit:"°C",Timestamp:(new Date).toISOString()};default:return{Description:"Unknown",Value:rounded,Unit:"?",Timestamp:(new Date).toISOString()}}}async function stateMachine(){var nextAction;const DELAY_MS=750;const TIMEOUT_MS=3e4;btState.started=true;log.debug("Current state:"+btState.state);if(btState.state==btState.prev_state){btState.state_cpt++}else{btState.state_cpt=0}if(btState.stopRequest){btState.state=State.STOPPING;btState.stopRequest=false}switch(btState.state){case State.NOT_CONNECTED:nextAction=btPairDevice;break;case State.CONNECTING:nextAction=undefined;break;case State.DEVICE_PAIRED:nextAction=btSubscribe;break;case State.SUBSCRIBING:nextAction=undefined;if(btState.state_cpt>TIMEOUT_MS/DELAY_MS){log.warn("Timeout in SUBSCRIBING");btState.state=State.DEVICE_PAIRED;btState.state_cpt=0}break;case State.METER_INIT:nextAction=meterInit;break;case State.METER_INITIALIZING:if(btState.state_cpt>TIMEOUT_MS/DELAY_MS){log.warn("Timeout in METER_INITIALIZING");nextAction=btSubscribe;btState.state_cpt=0}nextAction=undefined;break;case State.IDLE:if(btState.command!=null)nextAction=processCommand;else{nextAction=refresh}break;case State.ERROR:nextAction=disconnect;break;case State.BUSY:if(btState.state_cpt>TIMEOUT_MS/DELAY_MS){log.warn("Timeout in BUSY");nextAction=btSubscribe;btState.state_cpt=0}nextAction=undefined;break;case State.STOPPING:nextAction=disconnect;break;case State.STOPPED:nextAction=undefined;break;default:break}btState.prev_state=btState.state;if(nextAction!=undefined){log.debug("\tExecuting:"+nextAction.name);nextAction()}if(btState.state!=State.STOPPED){sleep(DELAY_MS).then(()=>stateMachine())}else{btState.started=false}}async function processCommand(){try{var command=btState.command;var packet,response,startGen;const RESET_POWER_OFF=6;const SET_POWER_OFF=7;const CLEAR_AVG_MIN_MAX=5;const PULSE_CMD=9;if(command==null){return}btState.state=State.BUSY;btState.stats["commands"]++;log.info("\t\tExecuting command "+command);log.debug("\t\tSetting meter to OFF");packet=makeModeRequest(CommandType.OFF);await SendAndResponse(packet);await sleep(100);if(isGeneration(command.type)||isSetting(command.type)){log.debug("\t\tWriting setpoint :"+command.setpoint);response=await SendAndResponse(makeSetpointRequest(command.type,command.setpoint));if(!parseFC16checked(response,0)){throw new Error("Setpoint not correctly written")}switch(command.type){case CommandType.SET_ShutdownDelay:startGen=makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.CMD,[RESET_POWER_OFF]);response=await SendAndResponse(startGen);if(!parseFC16checked(response,1)){command.error=true;command.pending=false;throw new Error("Failure to set poweroff timer.")}break;default:break}}if(!isSetting(command.type)&&isValid(command.type)){log.debug("\t\tSetting new mode :"+command.type);packet=makeModeRequest(command.type);if(packet==null){command.error=true;command.pending=false;log.error("Could not generate modbus packet for command",command);return}response=await SendAndResponse(packet);command.request=packet;command.answer=response;if(!parseFC16checked(response,0)){command.error=true;command.pending=false;throw new Error("Not all registers were written")}switch(command.type){case CommandType.V:case CommandType.mV:case CommandType.mA_active:case CommandType.mA_passive:case CommandType.PulseTrain:await sleep(1e3);log.debug("\t\tResetting statistics");startGen=makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.CMD,[CLEAR_AVG_MIN_MAX]);response=await SendAndResponse(startGen);if(!parseFC16checked(response,1)){command.error=true;command.pending=false;throw new Error("Failure to reset stats.")}break;case CommandType.GEN_PulseTrain:await sleep(1e3);log.debug("\t\tResetting statistics");startGen=makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.GEN_CMD,[PULSE_CMD,2]);response=await SendAndResponse(startGen);if(!parseFC16checked(response,2)){command.error=true;command.pending=false;throw new Error("Not all registers were written")}break;case CommandType.GEN_Frequency:await sleep(1e3);log.debug("\t\tResetting statistics");startGen=makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.GEN_CMD,[PULSE_CMD,1]);response=await SendAndResponse(startGen);if(!parseFC16checked(response,2)){command.error=true;command.pending=false;throw new Error("Not all registers were written")}break}}startGen=makeFC16(SENECA_MB_SLAVE_ID,MSCRegisters.CMD,[RESET_POWER_OFF]);response=await SendAndResponse(startGen);await refresh();command.error=false;command.pending=false;btState.command=null;btState.state=State.IDLE}catch(err){log.error("** error while executing command: "+err);btState.state=State.METER_INIT;btState.stats["exceptions"]++;if(err instanceof ModbusError)btState.stats["modbus_errors"]++;return}}async function SendAndResponse(command){if(command==null)return null;log.debug(">> "+buf2hex(command));btState.response=null;btState.stats["requests"]++;var startTime=(new Date).getTime();await btState.charWrite.writeValueWithoutResponse(command);while(btState.state==State.METER_INITIALIZING||btState.state==State.BUSY){if(btState.response!=null)break;await new Promise(resolve=>setTimeout(resolve,35))}var endTime=(new Date).getTime();var answer=btState.response?.slice();btState.response=null;btState.stats["responseTime"]=Math.round((1*btState.stats["responseTime"]*(btState.stats["responses"]%500)+(endTime-startTime))/(btState.stats["responses"]%500+1));btState.stats["lastResponseTime"]=Math.round(endTime-startTime)+" ms";btState.stats["responses"]++;return answer}async function meterInit(){var response;try{btState.state=State.METER_INITIALIZING;response=await SendAndResponse(makeSerialNumber());btState.meter.serial=parseSerialNumber(parseFC3(response));log.info("\t\tSerial number:"+btState.meter.serial);response=await SendAndResponse(makeCurrentMode());btState.meter.mode=parseCurrentMode(parseFC3(response),CommandType.NONE_UNKNOWN);log.debug("\t\tCurrent mode:"+btState.meter.mode);response=await SendAndResponse(makeBatteryLevel());btState.meter.battery=Math.round(parseBattery(parseFC3(response))*100)/100;btState.state=State.IDLE}catch(err){log.warn("Error while initializing meter :"+err);btState.stats["exceptions"]++;btState.state=State.DEVICE_PAIRED;if(err instanceof ModbusError)btState.stats["modbus_errors"]++}}async function disconnect(){btState.command=null;try{if(btState.btDevice!=null){if(btState.btDevice?.gatt?.connected){log.warn("* Calling disconnect on btdevice");btState.btDevice.removeEventListener("gattserverdisconnected",onDisconnected);btState.btDevice.gatt.disconnect()}}btState.btService=null}catch{}btState.state=State.STOPPED}async function onDisconnected(){log.warn("* GATT Server disconnected event, will try to reconnect *");btState.btService=null;btState.stats["GATT disconnects"]++;btState.state=State.DEVICE_PAIRED}function arrayBufferConcat(){var length=0;var buffer=null;for(var i in arguments){buffer=arguments[i];length+=buffer.byteLength}var joined=new Uint8Array(length);var offset=0;for(i in arguments){buffer=arguments[i];joined.set(new Uint8Array(buffer),offset);offset+=buffer.byteLength}return joined.buffer}function handleNotifications(event){let value=event.target.value;if(value!=null){log.debug("<< "+buf2hex(value.buffer));if(btState.response!=null){btState.response=arrayBufferConcat(btState.response,value.buffer)}else{btState.response=value.buffer.slice()}}}async function btPairDevice(forceSelection=true){btState.state=State.CONNECTING;try{if(typeof navigator.bluetooth?.getAvailability=="function"){const availability=await navigator.bluetooth.getAvailability();if(!availability){log.error("Bluetooth not available in browser.");throw new Error("Browser does not provide bluetooth")}}var device=null;if(typeof navigator.bluetooth?.getDevices=="function"&&!forceSelection){const availableDevices=await navigator.bluetooth.getDevices();availableDevices.forEach(function(dev,index){if(dev.name.startsWith("MSC"))device=dev})}if(device==null){device=await navigator.bluetooth.requestDevice({acceptAllDevices:false,filters:[{namePrefix:"MSC"}],optionalServices:[BlueToothMSC.ServiceUuid]})}btState.btDevice=device;btState.state=State.DEVICE_PAIRED;log.info("Bluetooth device "+device.name+" connected.");await sleep(500)}catch(err){log.warn("** error while connecting: "+err.message);btState.btService=null;if(btState.charRead!=null){try{btState.charRead.stopNotifications()}catch(error){}}btState.charRead=null;btState.charWrite=null;btState.state=State.ERROR;btState.stats["exceptions"]++}}async function btSubscribe(){try{btState.state=State.SUBSCRIBING;btState.stats["subcribes"]++;let device=btState.btDevice;let server=null;if(!device?.gatt?.connected){log.debug(`Connecting to GATT Server on ${device.name}...`);device.addEventListener("gattserverdisconnected",onDisconnected);try{if(btState.btService?.connected){btState.btService.disconnect();btState.btService=null;await sleep(100)}}catch(err){}server=await device.gatt.connect();log.debug("> Found GATT server")}else{log.debug("GATT already connected");server=device.gatt}btState.btService=await server.getPrimaryService(BlueToothMSC.ServiceUuid);if(btState.btService==null)throw new Error("GATT Service request failed");log.debug("> Found Serial service");btState.charWrite=await btState.btService.getCharacteristic(BlueToothMSC.ModbusRequestUuid);log.debug("> Found write characteristic");btState.charRead=await btState.btService.getCharacteristic(BlueToothMSC.ModbusAnswerUuid);log.debug("> Found read characteristic");btState.response=null;btState.charRead.addEventListener("characteristicvaluechanged",handleNotifications);btState.charRead.startNotifications();log.info("> Bluetooth interfaces ready.");btState.stats["last_connect"]=(new Date).toISOString();await sleep(50);btState.state=State.METER_INIT}catch(err){log.warn("** error while subscribing: "+err.message);if(btState.charRead!=null){try{if(btState.btDevice?.gatt?.connected){btState.charRead.stopNotifications()}btState.btDevice?.gatt.disconnect()}catch(error){}}btState.charRead=null;btState.charWrite=null;btState.state=State.DEVICE_PAIRED;btState.stats["exceptions"]++}}async function refresh(){btState.state=State.BUSY;try{var response=await SendAndResponse(makeCurrentMode());var mode=parseCurrentMode(parseFC3(response),btState.meter.mode);if(mode!=CommandType.NONE_UNKNOWN){btState.meter.mode=mode;if(btState.meter.isGeneration())await refreshGeneration();else await refreshMeasure()}btState.state=State.IDLE}catch(err){log.warn("Error while refreshing measure"+err);btState.state=State.DEVICE_PAIRED;btState.stats["exceptions"]++;if(err instanceof ModbusError)btState.stats["modbus_errors"]++}}async function refreshMeasure(){var response=await SendAndResponse(makeQualityBitRequest());var valid=isQualityValid(parseFC3(response));response=await SendAndResponse(makeMeasureRequest(btState.meter.mode));var meas=parseMeasure(parseFC3(response),btState.meter.mode);meas["error"]=!valid;btState.lastMeasure=meas}async function refreshGeneration(){var response=await SendAndResponse(makeSetpointRead(btState.meter.mode));if(response!=null){var results=parseSetpointRead(parseFC3(response),btState.meter.mode);response=await SendAndResponse(makeGenStatusRead());results["error"]=!parseGenStatus(parseFC3(response),btState.meter.mode);btState.lastSetpoint=results}}let btState=new APIState;module.exports={Stop:Stop,Pair:Pair,Execute:Execute,GetState:GetState,State:State,CommandType:CommandType,Command:Command,Parse:Parse,log:log,GetStateJSON:GetStateJSON,ExecuteJSON:ExecuteJSON}},{loglevel:1}]},{},[2])(2)});
